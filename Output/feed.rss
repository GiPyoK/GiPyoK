<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Gi Pyo John Kim</title><description>iOS Developer</description><link>https://www.gipyo-john-kim.com</link><language>en</language><lastBuildDate>Mon, 8 Mar 2021 19:01:33 -0800</lastBuildDate><pubDate>Mon, 8 Mar 2021 19:01:33 -0800</pubDate><ttl>250</ttl><atom:link href="https://www.gipyo-john-kim.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.gipyo-john-kim.com/blog/Portfolio</guid><title>Creating Portfolio with Publish by John Sundell</title><description>Getting started with Publish by John Sundell to create my own portfolio website with Swift</description><link>https://www.gipyo-john-kim.com/blog/Portfolio</link><pubDate>Thu, 7 Jan 2021 10:34:00 -0800</pubDate><content:encoded><![CDATA[<h1>Creating Portfolio with Publish by John Sundell</h1><p>I first built my portfolio website with basic HTML and CSS. It was my first attempt at creating a website and it looked ugly. While I was browsing through various libraries to enhance the look and maintainability of my portfolio, I stumbled upon a library called <a href="https://github.com/JohnSundell/Publish">Publish</a> by John Sundell. Publish is a static site generator built for Swift developers. I thought this would be a good tool to make my portfolio website and be a fun challenge to learn about it.</p><h3>Getting started</h3><pre><code>$ git clone https://github.<span class="property">com</span>/<span class="type">JohnSundell</span>/<span class="type">Publish</span>.<span class="property">git</span>
$ cd <span class="type">Publish</span>
$ make
$ mkdir <span class="type">GiPyoJohnKim</span>
$ cd <span class="type">GiPyoJohnKim</span>
$ publish new
</code></pre><p>After running these lines of code in the terminal, I was ready to create my website.</p><h3>Basic setup</h3><p>Inside <code>main.swift</code> file, I added my own section id's.</p><pre><code><span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
    <span class="keyword">case</span> about
    <span class="keyword">case</span> projects
    <span class="keyword">case</span> blog
}
</code></pre><p>The section id's will play the role of a navigation bar.</p><p>Next is the theme. There was the Foundation theme already available, but I wanted the option to modify the theme if needed. So, I duplicated <code>styles.css</code> file under <code>Publish/Resources/FoundationTheme/</code> into my Resources folder and created a new <code>HTMLFactory</code>.</p><pre><code><span class="keyword">struct</span> MyHtmlFactory&lt;Site: <span class="type">Website</span>&gt;: <span class="type">HTMLFactory</span> {
    <span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
        <span class="type">HTML</span>(<span class="string">"Hello World!"</span>)
    }
    
    <span class="keyword">func</span> makeSectionHTML(for section: <span class="type">Section</span>&lt;<span class="type">Site</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
        <span class="type">HTML</span>(<span class="string">""</span>)
    }
    
    <span class="keyword">func</span> makeItemHTML(for item: <span class="type">Item</span>&lt;<span class="type">Site</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
        <span class="type">HTML</span>(<span class="string">""</span>)
    }
    
    <span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
        <span class="keyword">try</span> <span class="call">makeIndexHTML</span>(for: context.<span class="property">index</span>, context: context)
    }
    
    <span class="keyword">func</span> makeTagListHTML(for page: <span class="type">TagListPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {
        <span class="keyword">nil</span>
    }
    
    <span class="keyword">func</span> makeTagDetailsHTML(for page: <span class="type">TagDetailsPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {
        <span class="keyword">nil</span>
    }
}
</code></pre><p>Then, I grabbed <code>wrapper</code>, <code>itemList</code>, and <code>tagList</code> from Foundation theme and will make modifications later.</p><pre><code><span class="keyword">private extension</span> <span class="type">Node</span> <span class="keyword">where</span> <span class="type">Context</span> == <span class="type">HTML</span>.<span class="type">BodyContext</span> {
    <span class="keyword">static func</span> wrapper(<span class="keyword">_</span> nodes: <span class="type">Node</span>...) -&gt; <span class="type">Node</span> {
        .<span class="call">div</span>(.<span class="call">class</span>(<span class="string">"wrapper"</span>), .<span class="dotAccess">group</span>(nodes))
    }
    
    <span class="keyword">static func</span> itemList&lt;T: <span class="type">Website</span>&gt;(for items: [<span class="type">Item</span>&lt;<span class="type">T</span>&gt;], on site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {
        <span class="keyword">return</span> .<span class="call">ul</span>(
            .<span class="call">class</span>(<span class="string">"item-list"</span>),
            .<span class="call">forEach</span>(items) { item <span class="keyword">in</span>
                .<span class="call">li</span>(.<span class="call">article</span>(
                    .<span class="call">h1</span>(.<span class="call">a</span>(
                        .<span class="call">href</span>(item.<span class="property">path</span>),
                        .<span class="call">text</span>(item.<span class="property">title</span>)
                    )),
                    .<span class="call">tagList</span>(for: item, on: site),
                    .<span class="call">p</span>(.<span class="call">text</span>(item.<span class="property">description</span>))
                ))
            }
        )
    }

    <span class="keyword">static func</span> tagList&lt;T: <span class="type">Website</span>&gt;(for item: <span class="type">Item</span>&lt;<span class="type">T</span>&gt;, on site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {
        <span class="keyword">return</span> .<span class="call">ul</span>(.<span class="call">class</span>(<span class="string">"tag-list"</span>), .<span class="dotAccess">forEach</span>(item.<span class="property">tags</span>) { tag <span class="keyword">in</span>
            .<span class="call">li</span>(.<span class="call">a</span>(
                .<span class="call">href</span>(site.<span class="call">path</span>(for: tag)),
                .<span class="call">text</span>(tag.<span class="property">string</span>)
            ))
        })
    }
}
</code></pre><p>With my own <code>styles.css</code> file and <code>HTMLFactory</code> defined, I can now initialized my own theme.</p><pre><code>  <span class="keyword">extension</span> <span class="type">Theme</span> {
    <span class="keyword">static var</span> myTheme: <span class="type">Theme</span> {
        <span class="type">Theme</span>(
            htmlFactory: <span class="type">MyHtmlFactory</span>(),
            resourcePaths: [<span class="string">"Resources/Theme/styles.css"</span>]
        )
    }
}
</code></pre><p>Lastly, I can apply my theme and publish my website using this line of code:</p><pre><code><span class="keyword">try</span> <span class="type">GiPyoJohnKim</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">myTheme</span>)
</code></pre><h3>Formatting the page</h3><p>Right now, the main page only shows "Hello World!" because there is nothing but <code>HTML("Hello World!")</code> inside <code>makeIndexHTML()</code>function. Whatever that goes inside the <code>makeIndexHTML()</code> function will show in the main home page. I formatted the page so that it will show my dummy blog posts and projects. (This is just a test to see if I can populate the site with given markdown files. I will change the looks of the main page later.)</p><pre><code><span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
        <span class="type">HTML</span>(
            .<span class="call">head</span>(for: index, on: context.<span class="property">site</span>),
            
            .<span class="call">body</span>(
                .<span class="call">myHeader</span>(for: context),
                
                .<span class="call">wrapper</span>(
                    .<span class="call">ul</span>(
                        .<span class="call">class</span>(<span class="string">"item-list"</span>),
                        .<span class="call">forEach</span>(context.<span class="call">allItems</span>(sortedBy: \.<span class="property">date</span>, order: .<span class="dotAccess">descending</span>)) { item <span class="keyword">in</span>
                            .<span class="call">li</span>(
                                .<span class="call">article</span>(
                                    .<span class="call">h1</span>(
                                        .<span class="call">a</span>(
                                            .<span class="call">href</span>(item.<span class="property">path</span>),
                                            .<span class="call">text</span>(item.<span class="property">title</span>)
                                        ) <span class="comment">//a</span>
                                    ), <span class="comment">//h1</span>
                                    .<span class="call">tagList</span>(for: item, on: context.<span class="property">site</span>),
                                    .<span class="call">p</span>(.<span class="call">text</span>(item.<span class="property">description</span>))
                                ) <span class="comment">//article</span>
                            ) <span class="comment">//li</span>
                        }) <span class="comment">//ul</span>
                ) <span class="comment">//wrapper</span>
            ) <span class="comment">//body</span>
        ) <span class="comment">//html</span>
    }
</code></pre><p>The<code>.head</code> tag will display the name of the site, and the <code>.body</code> tag will loop through all the items in the content folder and display them in a list.</p><p>This is my folder structure:</p><img src="https://www.gipyo-john-kim.com/images/Portfolio/Untitled.png" alt="0" /><p>This is how the dummy markdown file is formatted:</p><img class="responsive" src="https://www.gipyo-john-kim.com/images/Portfolio/Untitled%201.png" alt="1" width="720" /><p>This is how the actual site looks like:</p><img class="responsive" src="https://www.gipyo-john-kim.com/images/Portfolio/Untitled%202.png" alt="2" width="720" /><p>When I was playing around with the Foundation theme, I remembered that there were section names below the site name. I found <code>.header</code> tag already defined in <code>Theme+Foundation.swift</code> file and replaced my <code>.myHeader</code> with it.</p><pre><code>.<span class="call">body</span>(
		.<span class="call">header</span>(for: context, selectedSection: (<span class="type">GiPyoJohnKim</span>.<span class="type">SectionID</span>.<span class="property">about</span> <span class="keyword">as</span>! <span class="type">Site</span>.<span class="type">SectionID</span>)),
		<span class="comment">// ...</span>
)
</code></pre><p>Although the main page shows a list of blog posts and project posts, I will change the main page to be the about page. So I highlighted the about section, and this is how the main page:</p><img class="responsive" src="https://www.gipyo-john-kim.com/images/Portfolio/Untitled%203.png" alt="3" width="720" /><p>Right now, a blank page shows up when the title of a post is clicked. By implementing <code>makeItemHTML()</code> function, the blank page will be replaced with the actual content of the post.</p><pre><code><span class="keyword">func</span> makeItemHTML(for item: <span class="type">Item</span>&lt;<span class="type">Site</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
        <span class="type">HTML</span>(
            .<span class="call">head</span>(for: item, on: context.<span class="property">site</span>),
            
            .<span class="call">body</span>(
                .<span class="call">header</span>(for: context, selectedSection: item.<span class="property">sectionID</span>),
                
                .<span class="call">wrapper</span>(
                    .<span class="call">article</span>(
                        .<span class="call">class</span>(<span class="string">"content"</span>),
                        .<span class="call">tagList</span>(for: item, on: context.<span class="property">site</span>),
                        .<span class="call">contentBody</span>(item.<span class="property">body</span>)
                    ) <span class="comment">//article</span>
                ) <span class="comment">//wrapper</span>
            ) <span class="comment">//body</span>
        ) <span class="comment">//html</span>
    }
</code></pre><img class="responsive" src="https://www.gipyo-john-kim.com/images/Portfolio/Untitled%204.png" alt="4" width="720" />]]></content:encoded></item><item><guid isPermaLink="true">https://www.gipyo-john-kim.com/projects/ROK%20Calculator</guid><title>ROK Calculator </title><description>iOS app to help you with the game Rise of Kingdoms</description><link>https://www.gipyo-john-kim.com/projects/ROK%20Calculator</link><pubDate>Thu, 8 Oct 2020 10:10:00 -0700</pubDate><content:encoded><![CDATA[<h1>ROK Calculator <a href="https://apps.apple.com/jo/app/rok-calculator/id1527528780#?platform=iphone" target="_blank"><i class="fab fa-app-store-ios" style="font-size: 1em;"></i></a></h1><img src="https://www.gipyo-john-kim.com/images/ROK%20Calculator/ROK%20Calculator%20Mockup.png" alt="ROK Calculator iPhone" class="responsive" width="720" /><p>ROK Calculator (with more than 2.6k downloads) is an assistant app that helps calculate how much speed-ups a user has in the mobile game "Rise of Kingdoms". Different kinds of speed-ups can be added together and view the total amount in days, hours, or minutes. ROK Calculator has saving mechanism as well, so that the users can their speed-up amount history as bar graphs.</p><ul><li><strong>Swift</strong></li><li><strong>SwiftUI</strong> - Built responsive UI with MVVM design pattern</li><li><strong>CoreData</strong> - Saved user speed-up data</li><li><strong>SwiftUICharts</strong> - Displayed saved speed-up data as bar graphs</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.gipyo-john-kim.com/blog/Flappy%20Bird%20NEAT-Python</guid><title>Flappy Bird NEAT-Python </title><description>A description of my first blog.</description><link>https://www.gipyo-john-kim.com/blog/Flappy%20Bird%20NEAT-Python</link><pubDate>Sat, 28 Mar 2020 10:10:00 -0700</pubDate><content:encoded><![CDATA[<h1>Flappy Bird NEAT-Python <a href="https://github.com/GiPyoK/Flappy-Bird-NEAT-Python" target="_blank"><i class="fab fa-github" style="font-size: 1em;"></i></a></h1><html>
<img src="https://www.gipyo-john-kim.com/images/Flappy%20Bird/NEAT%20Flappy%20Bird%20demo.gif" alt="Flappy Bird demo" width="480" height="480"><br>
</html><p>This is a clone of flappy bird game incorporated with <html><a href="https://neat-python.readthedocs.io/en/latest/">NEAT(NeuroEvolution of Augmenting Topologies)-Python</a></html>. The position of the bird, top pipe and bottom pipe are fed to NEAT-Python to create artificial neural networks and determine when to jump.</p><p>In order to feed the game information to NEAT, I have to make the game first. With help of <html><a href="https://www.pygame.org/wiki/about">Pygame</a></html>, the mechanics of Flappy Bird can be easily built.</p><p>I created 3 classes <code>Bird</code>, <code>Pipe</code>, and <code>Base</code>. The <code>Bird</code> class will handle the movement and the animation of the the bird.</p><pre><code><span class="keyword">class</span> Bird:
    <span class="type">IMGS</span> = <span class="type">BIRD_IMGS
    MAX_ROTATION</span> = <span class="number">25</span>
    <span class="type">ROT_VEL</span> = <span class="number">20</span>
    <span class="type">ANIMATION_TIME</span> = <span class="number">5</span>

    def __init__(<span class="keyword">self</span>, x, y):
        <span class="keyword">self</span>.<span class="property">x</span> = x
        <span class="keyword">self</span>.<span class="property">y</span> = y
        <span class="keyword">self</span>.<span class="property">tilt</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="property">tick_count</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="property">vel</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="property">height</span> = <span class="keyword">self</span>.<span class="property">y</span>
        <span class="keyword">self</span>.<span class="property">img_count</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="property">img</span> = <span class="keyword">self</span>.<span class="type">IMGS</span>[<span class="number">0</span>]

    # top right coner <span class="keyword">is</span> (<span class="number">0</span>,<span class="number">0</span>)
    def <span class="call">jump</span>(<span class="keyword">self</span>):
        <span class="keyword">self</span>.<span class="property">vel</span> = -<span class="number">10.5</span> # negative value to go up
        <span class="keyword">self</span>.<span class="property">tick_count</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="property">height</span> = <span class="keyword">self</span>.<span class="property">y</span>

    def <span class="call">move</span>(<span class="keyword">self</span>):
        <span class="keyword">self</span>.<span class="property">tick_count</span> += <span class="number">1</span>

        # simultating bird jumping <span class="keyword">in</span> an arc
        d = <span class="keyword">self</span>.<span class="property">vel</span>*<span class="keyword">self</span>.<span class="property">tick_count</span> + <span class="number">1.5</span>*<span class="keyword">self</span>.<span class="property">tick_count</span>**<span class="number">2</span>

        <span class="keyword">if</span> d &gt;= <span class="number">16</span>:
            d = <span class="number">16</span>  # terminal velocity (does not accelerate downward more than <span class="number">16</span>)
        
        <span class="keyword">if</span> d &lt; <span class="number">0</span> :
            d -= <span class="number">2</span>

        <span class="keyword">self</span>.<span class="property">y</span> += d # move the bird <span class="keyword">in</span> y direction

        # <span class="keyword">if</span> the bird <span class="keyword">is</span> moving upward, or higher than the position before jump
        # tilt upward
        <span class="keyword">if</span> d &lt; <span class="number">0</span> or <span class="keyword">self</span>.<span class="property">y</span> &lt; <span class="keyword">self</span>.<span class="property">height</span> + <span class="number">50</span>:
            <span class="keyword">if self</span>.<span class="property">tilt</span> &lt; <span class="keyword">self</span>.<span class="type">MAX_ROTATION</span>:
                <span class="keyword">self</span>.<span class="property">tilt</span> = <span class="keyword">self</span>.<span class="type">MAX_ROTATION</span>
        else: # tilt downward
            <span class="keyword">if self</span>.<span class="property">tilt</span> &gt; -<span class="number">90</span>:
                <span class="keyword">self</span>.<span class="property">tilt</span> -= <span class="keyword">self</span>.<span class="type">ROT_VEL</span>

    def <span class="call">draw</span>(<span class="keyword">self</span>, win):
        <span class="keyword">self</span>.<span class="property">img_count</span> += <span class="number">1</span>

        <span class="keyword">if self</span>.<span class="property">img_count</span> &lt; <span class="keyword">self</span>.<span class="type">ANIMATION_TIME</span>:
            <span class="keyword">self</span>.<span class="property">img</span> = <span class="keyword">self</span>.<span class="type">IMGS</span>[<span class="number">0</span>]
        elif <span class="keyword">self</span>.<span class="property">img_count</span> &lt; <span class="keyword">self</span>.<span class="type">ANIMATION_TIME</span>*<span class="number">2</span>:
            <span class="keyword">self</span>.<span class="property">img</span> = <span class="keyword">self</span>.<span class="type">IMGS</span>[<span class="number">1</span>]
        elif <span class="keyword">self</span>.<span class="property">img_count</span> &lt; <span class="keyword">self</span>.<span class="type">ANIMATION_TIME</span>*<span class="number">3</span>:
            <span class="keyword">self</span>.<span class="property">img</span> = <span class="keyword">self</span>.<span class="type">IMGS</span>[<span class="number">2</span>]
        elif <span class="keyword">self</span>.<span class="property">img_count</span> &lt; <span class="keyword">self</span>.<span class="type">ANIMATION_TIME</span>*<span class="number">4</span>:
            <span class="keyword">self</span>.<span class="property">img</span> = <span class="keyword">self</span>.<span class="type">IMGS</span>[<span class="number">1</span>]    
        elif <span class="keyword">self</span>.<span class="property">img_count</span> == <span class="keyword">self</span>.<span class="type">ANIMATION_TIME</span>*<span class="number">4</span> + <span class="number">1</span>:
            <span class="keyword">self</span>.<span class="property">img</span> = <span class="keyword">self</span>.<span class="type">IMGS</span>[<span class="number">0</span>]
            <span class="keyword">self</span>.<span class="property">img_count</span> = <span class="number">0</span>

        <span class="keyword">if self</span>.<span class="property">tilt</span> &lt;= -<span class="number">80</span>:
            <span class="keyword">self</span>.<span class="property">img</span> = <span class="keyword">self</span>.<span class="type">IMGS</span>[<span class="number">1</span>]
            <span class="keyword">self</span>.<span class="property">img_count</span> = <span class="keyword">self</span>.<span class="type">ANIMATION_TIME</span>*<span class="number">2</span>
        
        # rotate the bird image around the center, not top left 
        rotated_image = pygame.<span class="property">transform</span>.<span class="call">rotate</span>(<span class="keyword">self</span>.<span class="property">img</span>, <span class="keyword">self</span>.<span class="property">tilt</span>)
        new_rect = rotated_image.<span class="call">get_rect</span>(center = <span class="keyword">self</span>.<span class="property">img</span>.<span class="call">get_rect</span>(topleft = (<span class="keyword">self</span>.<span class="property">x</span>, <span class="keyword">self</span>.<span class="property">y</span>)).<span class="property">center</span>)
        win.<span class="call">blit</span>(rotated_image, new_rect.<span class="property">topleft</span>)

    def <span class="call">get_mask</span>(<span class="keyword">self</span>):
        <span class="keyword">return</span> pygame.<span class="property">mask</span>.<span class="call">from_surface</span>(<span class="keyword">self</span>.<span class="property">img</span>)
</code></pre><p><code>Pipe</code> class will handle the movement (When playing the game, it looks like the bird is moving forward; however, it is the pipes that are actually moving backwards to create that illusion.), random generation of pipe height, and check collision with the bird.</p><pre><code><span class="keyword">class</span> Pipe:
    <span class="type">GAP</span> = <span class="number">200</span>
    <span class="type">VEL</span> = <span class="number">5</span>

    def __init__(<span class="keyword">self</span>,x):
        <span class="keyword">self</span>.<span class="property">x</span> = x
        <span class="keyword">self</span>.<span class="property">heigh</span> = <span class="number">0</span>

        <span class="keyword">self</span>.<span class="property">top</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="property">bottom</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="type">PIPE_TOP</span> = pygame.<span class="property">transform</span>.<span class="call">flip</span>(<span class="type">PIPE_IMG</span>, <span class="type">False</span>, <span class="type">True</span>)
        <span class="keyword">self</span>.<span class="type">PIPE_BOTTOM</span> = <span class="type">PIPE_IMG</span>

        <span class="keyword">self</span>.<span class="property">passed</span> = <span class="type">False</span>
        <span class="keyword">self</span>.<span class="call">set_height</span>()

    def <span class="call">set_height</span>(<span class="keyword">self</span>):
        <span class="keyword">self</span>.<span class="property">height</span> = random.<span class="call">randrange</span>(<span class="number">50</span>, <span class="number">450</span>)
        <span class="keyword">self</span>.<span class="property">top</span> = <span class="keyword">self</span>.<span class="property">height</span> - <span class="keyword">self</span>.<span class="type">PIPE_TOP</span>.<span class="call">get_height</span>()
        <span class="keyword">self</span>.<span class="property">bottom</span> = <span class="keyword">self</span>.<span class="property">height</span> + <span class="keyword">self</span>.<span class="type">GAP</span>
    
    def <span class="call">move</span>(<span class="keyword">self</span>):
        <span class="keyword">self</span>.<span class="property">x</span> -= <span class="keyword">self</span>.<span class="type">VEL</span>

    def <span class="call">draw</span>(<span class="keyword">self</span>, win):
        win.<span class="call">blit</span>(<span class="keyword">self</span>.<span class="type">PIPE_TOP</span>, (<span class="keyword">self</span>.<span class="property">x</span>, <span class="keyword">self</span>.<span class="property">top</span>))
        win.<span class="call">blit</span>(<span class="keyword">self</span>.<span class="type">PIPE_BOTTOM</span>, (<span class="keyword">self</span>.<span class="property">x</span>, <span class="keyword">self</span>.<span class="property">bottom</span>))

    def <span class="call">collide</span>(<span class="keyword">self</span>, bird):
        bird_mask = bird.<span class="call">get_mask</span>()
        top_mask = pygame.<span class="property">mask</span>.<span class="call">from_surface</span>(<span class="keyword">self</span>.<span class="type">PIPE_TOP</span>)
        bottom_mask = pygame.<span class="property">mask</span>.<span class="call">from_surface</span>(<span class="keyword">self</span>.<span class="type">PIPE_BOTTOM</span>)

        top_offset = (<span class="keyword">self</span>.<span class="property">x</span> - bird.<span class="property">x</span>, <span class="keyword">self</span>.<span class="property">top</span> - <span class="call">round</span>(bird.<span class="property">y</span>))
        bottom_offset = (<span class="keyword">self</span>.<span class="property">x</span> - bird.<span class="property">x</span>, <span class="keyword">self</span>.<span class="property">bottom</span> - <span class="call">round</span>(bird.<span class="property">y</span>))

        b_point = bird_mask.<span class="call">overlap</span>(bottom_mask, bottom_offset)
        t_point = bird_mask.<span class="call">overlap</span>(top_mask, top_offset)

        <span class="keyword">if</span> t_point or b_point:
            <span class="keyword">return</span> <span class="type">True</span>
        
        <span class="keyword">return</span> <span class="type">False</span>
</code></pre><p>Lastly, <code>Base</code> class will handle the movement of the ground which will be in sync with the pipes and the animation of generating a continuous ground.</p><pre><code><span class="keyword">class</span> Base:
    <span class="type">VEL</span> = <span class="number">5</span>
    <span class="type">WIDTH</span> = <span class="type">BASE_IMG</span>.<span class="call">get_width</span>()

    def __init__(<span class="keyword">self</span>, y):
        <span class="keyword">self</span>.<span class="property">y</span> = y
        <span class="keyword">self</span>.<span class="property">x1</span> = <span class="number">0</span>
        <span class="keyword">self</span>.<span class="property">x2</span> = <span class="keyword">self</span>.<span class="type">WIDTH</span>

    def <span class="call">move</span>(<span class="keyword">self</span>):
        <span class="keyword">self</span>.<span class="property">x1</span> -= <span class="keyword">self</span>.<span class="type">VEL</span>
        <span class="keyword">self</span>.<span class="property">x2</span> -= <span class="keyword">self</span>.<span class="type">VEL</span>

        <span class="keyword">if self</span>.<span class="property">x1</span> + <span class="keyword">self</span>.<span class="type">WIDTH</span> &lt; <span class="number">0</span>:
            <span class="keyword">self</span>.<span class="property">x1</span> = <span class="keyword">self</span>.<span class="property">x2</span> + <span class="keyword">self</span>.<span class="type">WIDTH</span>
        
        <span class="keyword">if self</span>.<span class="property">x2</span> + <span class="keyword">self</span>.<span class="type">WIDTH</span> &lt; <span class="number">0</span>:
            <span class="keyword">self</span>.<span class="property">x2</span> = <span class="keyword">self</span>.<span class="property">x1</span> + <span class="keyword">self</span>.<span class="type">WIDTH</span>

    def <span class="call">draw</span>(<span class="keyword">self</span>, win):
        win.<span class="call">blit</span>(<span class="type">BASE_IMG</span>, (<span class="keyword">self</span>.<span class="property">x1</span>, <span class="keyword">self</span>.<span class="property">y</span>))
        win.<span class="call">blit</span>(<span class="type">BASE_IMG</span>, (<span class="keyword">self</span>.<span class="property">x2</span>, <span class="keyword">self</span>.<span class="property">y</span>))
</code></pre><p>I also defined <code>draw_window</code> function to see the socre, generation, and population of the birds.</p><pre><code>def <span class="call">draw_window</span>(win, birds, pipes, base, score, gen, population):
    win.<span class="call">blit</span>(<span class="type">BG_IMG</span>, (<span class="number">0</span>,<span class="number">0</span>))

    <span class="keyword">for</span> pipe <span class="keyword">in</span> pipes:
        pipe.<span class="call">draw</span>(win)

    text = <span class="type">STAT_FONT</span>.<span class="call">render</span>(<span class="string">"Score: "</span> + <span class="call">str</span>(score), <span class="number">1</span>, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))
    win.<span class="call">blit</span>(text, (<span class="type">WIN_WIDTH</span> - <span class="number">10</span> - text.<span class="call">get_width</span>(), <span class="number">10</span>))

    text = <span class="type">STAT_FONT</span>.<span class="call">render</span>(<span class="string">"Gen: "</span> + <span class="call">str</span>(gen), <span class="number">1</span>, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))
    win.<span class="call">blit</span>(text, (<span class="number">10</span>, <span class="number">10</span>))

    text = <span class="type">STAT_FONT</span>.<span class="call">render</span>(<span class="string">"Population: "</span> + <span class="call">str</span>(population), <span class="number">1</span>, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))
    win.<span class="call">blit</span>(text, (<span class="number">10</span>, <span class="number">50</span>))

    <span class="keyword">for</span> bird <span class="keyword">in</span> birds:
        bird.<span class="call">draw</span>(win)

    base.<span class="call">draw</span>(win)
    pygame.<span class="property">display</span>.<span class="call">update</span>()
</code></pre><p>Now, the game mechinics are finished, it is time to connect the neural network to the game. In the <code>main</code> class, <code>fitness</code> of each <code>genome</code> is set to 0.</p><pre><code>def <span class="call">main</span>(genomes, config):
    global gen
    gen += <span class="number">1</span>
    nets = []
    ge =[]
    birds = []

    <span class="keyword">for _</span>, genome <span class="keyword">in</span> genomes:
        net = neat.<span class="property">nn</span>.<span class="type">FeedForwardNetwork</span>.<span class="call">create</span>(genome, config)
        nets.<span class="call">append</span>(net)
        birds.<span class="call">append</span>(<span class="type">Bird</span>(<span class="number">230</span>, <span class="number">350</span>))
        genome.<span class="property">fitness</span> = <span class="number">0</span>
        ge.<span class="call">append</span>(genome)
</code></pre><p>There needs to be a some kind of measurement for the AI to know if the genome in that generation is doing good or bad. The <code>fitness</code> value is the measurement for the AI to determine which genomes to keep and bring them to next generation and which genomes to discard.</p><p>I implemented 2 ways for a bird to achieve higher <code>fitness</code> value. The first way is based on survival time. After a bird has moved once in a game loop, it gains 0.1 <code>fitness</code> value.</p><pre><code>def <span class="call">main</span>(genomes, config):
# ...
<span class="keyword">while</span> run:
# ...
        <span class="keyword">for</span> x, bird <span class="keyword">in</span> <span class="call">enumerate</span>(birds):
              bird.<span class="call">move</span>()
              ge[x].fitness += <span class="number">0.1</span>
</code></pre><p>The second way is when a bird passes through the pipes and gets a score. In this case the <code>fitness</code> value is incremented by 5, a large number compared to 0.1. Because the ultimate goal of this game is to get a high score, I chose to give significantly higher <code>fitness</code> value so that the neural network can train itself in a direction that is aligned with the game objective.</p><pre><code>def <span class="call">main</span>(genomes, config):
# ...
<span class="keyword">while</span> run:
# ...
        <span class="keyword">if</span> add_pipe:
            score += <span class="number">1</span>
            <span class="keyword">for</span> g <span class="keyword">in</span> ge:
                g.<span class="property">fitness</span> += <span class="number">5</span>
</code></pre><p>So far, I have only introduced the ways to increase the <code>fitness</code> value. There will be a case where the fitness value will decrease, so that the AI will opt out the inferior genomes. Decrement of fitness value will happen when the bird collides with a pipe and dies.</p><pre><code>def <span class="call">main</span>(genomes, config):
# ...
<span class="keyword">while</span> run:
# ...
        <span class="keyword">for</span> pipe <span class="keyword">in</span> pipes:
            <span class="keyword">for</span> x, bird <span class="keyword">in</span> <span class="call">enumerate</span>(birds):
                <span class="keyword">if</span> pipe.<span class="call">collide</span>(bird):
                    ge[x].fitness -= <span class="number">1</span>
                    birds.<span class="call">pop</span>(x)
                    nets.<span class="call">pop</span>(x)
                    ge.<span class="call">pop</span>(x)
</code></pre><p>Finally, I defined <code>run</code> function to setup NEAT from <code>config-feedforward.txt</code> file.</p><pre><code>def <span class="call">run</span>(config_path):
    config = neat.<span class="property">config</span>.<span class="type">Config</span>(neat.<span class="type">DefaultGenome</span>,
                                neat.<span class="type">DefaultReproduction</span>,
                                neat.<span class="type">DefaultSpeciesSet</span>,
                                neat.<span class="type">DefaultStagnation</span>,
                                config_path)

    population = neat.<span class="type">Population</span>(config)    # <span class="keyword">set</span> population
    population.<span class="call">add_reporter</span>(neat.<span class="type">StdOutReporter</span>(<span class="type">True</span>))  # add reports to population
    stats = neat.<span class="type">StatisticsReporter</span>()
    population.<span class="call">add_reporter</span>(stats)
</code></pre><p>There are 3 main parameters to tune in order to optimize NEAT's learning capabilities. <code>pop-size</code> controls the number of birds in each generation. <code>bias_mutate_rate</code> controls the probability that mutation will change the bias of a node by adding a random value. <code>bias_replace_rate</code> controls the probability that mutation will replace the bias of a node with a newly chosen random value.</p><p>This project was a fun project to get an introductory about neural networks. To tell the truth, Flappy Bird was a too simple for NEAT. When I cranked up the <code>pop-size</code> to 50, the first generation could play the game endlessly. In order to simulate learning process of NEAT, I limited the <code>pop-size</code> to 10 in the gif above.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.gipyo-john-kim.com/blog/Schematic%20Capture%20Core%20Data</guid><title>Schematic Capture: Core Data</title><description>How Core Data was used in Schematic Capture</description><link>https://www.gipyo-john-kim.com/blog/Schematic%20Capture%20Core%20Data</link><pubDate>Tue, 3 Mar 2020 10:10:00 -0800</pubDate><content:encoded><![CDATA[<h1>Schematic Capture: Core Data</h1><p>Schematic Capture needs to persist projects. A project holds different job sheets; a job sheet holds different components; a component has a corresponding photo of that component.<br><br>For easier understanding of the relationship among the entities, here is the graph view:</p><img class="responsive" src="https://www.gipyo-john-kim.com/images/Schematic%20Capture%20Core%20Data/Core%20Data%20Graph.png" alt="Core Data Graph" width="720" /><p>The single arrowhead represents one-to-one relationship, and the double arrowhead represents one-to-many relationship. This was my first time dealing with relationships with core data, but after some struggle, I was able to setup the relationship.</p><p>Referencing the above relationships, I created extensions on core data models with convenience init functions. By doing so, it helps the work flow of decoding and encoding JSON data when downloading and uploading the projects.</p><pre><code><span class="comment">//  Project+Convenience.swift</span>
<span class="keyword">extension</span> <span class="type">Project</span> {
    <span class="keyword">var</span> projectRepresentation: <span class="type">ProjectRepresentation</span>? {
        <span class="keyword">guard let</span> name = name, <span class="keyword">let</span> client = client <span class="keyword">else</span> { <span class="keyword">return nil</span> }
        <span class="comment">// Sort the job sheet array by id</span>
        <span class="keyword">let</span> idDescriptor = <span class="type">NSSortDescriptor</span>(key: <span class="string">"id"</span>, ascending: <span class="keyword">true</span>)
        <span class="comment">// convert NSSet to an array, if nil, return nil</span>
        <span class="keyword">let</span> jobSheetsArr = jobSheets != <span class="keyword">nil</span> ? (jobSheets!.<span class="call">sortedArray</span>(using: [idDescriptor]) <span class="keyword">as</span>? [<span class="type">JobSheetRepresentation</span>]) : <span class="keyword">nil
        return</span> <span class="type">ProjectRepresentation</span>(id: <span class="type">Int</span>(id), name: name, jobSheets: jobSheetsArr, client: client, clientId: <span class="type">Int</span>(clientId))
    }
    
    <span class="keyword">@discardableResult convenience init</span>(id: <span class="type">Int</span>,
                                        name: <span class="type">String</span>,
                                        jobSheets: [<span class="type">JobSheet</span>]?,
                                        client: <span class="type">String</span>,
                                        clientId: <span class="type">Int</span>,
                                        context: <span class="type">NSManagedObjectContext</span>) {
        <span class="keyword">self</span>.<span class="keyword">init</span>(context: context)
        <span class="keyword">self</span>.<span class="property">id</span> = <span class="type">Int32</span>(id)
        <span class="keyword">self</span>.<span class="property">name</span> = name
        <span class="keyword">self</span>.<span class="property">jobSheets</span> = jobSheets != <span class="keyword">nil</span> ? <span class="type">NSSet</span>(array: jobSheets!) : <span class="keyword">nil
        self</span>.<span class="property">client</span> = client
        <span class="keyword">self</span>.<span class="property">clientId</span> = <span class="type">Int32</span>(clientId)
    }
    
    <span class="keyword">@discardableResult convenience init</span>(projectRepresentation: <span class="type">ProjectRepresentation</span>, context: <span class="type">NSManagedObjectContext</span>) {
        
        <span class="keyword">let</span> jobSheets = projectRepresentation.<span class="property">jobSheets</span> != <span class="keyword">nil</span> ? projectRepresentation.<span class="property">jobSheets</span>!.<span class="call">map</span> { <span class="type">JobSheet</span>(jobSheetRepresentation: $0, context: context) } : <span class="keyword">nil
        
        self</span>.<span class="keyword">init</span> (id: projectRepresentation.<span class="property">id</span>,
            name: projectRepresentation.<span class="property">name</span>,
            jobSheets: jobSheets,
            client: projectRepresentation.<span class="property">client</span>,
            clientId: projectRepresentation.<span class="property">clientId</span>,
            context: context)
    }
}
</code></pre><p>By using <code>convenience init()</code>, it makes easy to convert between the actual core data model and the representation of that model.</p><p>I made the representation model like so:</p><pre><code><span class="comment">//  ProjectRepresentation.swift</span>
<span class="keyword">struct</span> ProjectRepresentation: <span class="type">Codable</span> {
    <span class="keyword">let</span> id: <span class="type">Int</span>
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> jobSheets: [<span class="type">JobSheetRepresentation</span>]?
    <span class="keyword">let</span> client: <span class="type">String</span>
    <span class="keyword">let</span> clientId: <span class="type">Int</span>
    
    <span class="keyword">private enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
        <span class="keyword">case</span> id
        <span class="keyword">case</span> name
        <span class="keyword">case</span> jobSheets = <span class="string">"jobsheet"</span>
        <span class="keyword">case</span> client = <span class="string">"companyName"</span>
        <span class="keyword">case</span> clientId
    }
}
</code></pre><p>When the app is launched, core data model or the JSON data is converted to the representation model and used throughout the app. Displaying the data and updating the data is handled with the representation model. When uploading the data, representation model is converted into a JSON model and uploaded to our firebase storage. When persisting the data with core data, the representation model is converted back to core data model and saved in a user's phone storage.</p><p>Convenience initializers and representation models are made in similar manner for other entities as well.</p><p>An example of representation model being used is when downloading project and decoding the data.</p><pre><code><span class="comment">//  ProjectController.swift</span>
<span class="keyword">class</span> ProjectController {
    
    <span class="keyword">var</span> bearer: <span class="type">Bearer</span>?
    <span class="keyword">var</span> user: <span class="type">User</span>?
    <span class="keyword">var</span> projects: [<span class="type">ProjectRepresentation</span>] = []

		<span class="keyword">private let</span> baseURL = <span class="type">URL</span>(string: <span class="string">"https://sc-test-be.herokuapp.com/api"</span>)!

		<span class="keyword">func</span> downloadAssignedJobs(completion: <span class="keyword">@escaping</span> (<span class="type">NetworkingError</span>?) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }) {
        
        <span class="keyword">guard let</span> bearer = <span class="keyword">self</span>.<span class="property">bearer</span> <span class="keyword">else</span> {
            <span class="call">completion</span>(.<span class="dotAccess">noBearer</span>)
            <span class="keyword">return</span>
        }
        
        <span class="keyword">let</span> requestURL = <span class="keyword">self</span>.<span class="property">baseURL</span>.<span class="call">appendingPathComponent</span>(<span class="string">"jobsheets"</span>).<span class="call">appendingPathComponent</span>(<span class="string">"assigned"</span>)
        
        <span class="keyword">var</span> request = <span class="type">URLRequest</span>(url: requestURL)
        request.<span class="property">httpMethod</span> = <span class="type">HTTPMethod</span>.<span class="property">get</span>.<span class="property">rawValue</span>
        request.<span class="call">setValue</span>(<span class="string">"Bearer</span> \(bearer.<span class="property">idToken</span>)<span class="string">"</span>, forHTTPHeaderField: <span class="type">HeaderNames</span>.<span class="property">authorization</span>.<span class="property">rawValue</span>)
        request.<span class="call">setValue</span>(<span class="string">"application/json"</span>, forHTTPHeaderField: <span class="type">HeaderNames</span>.<span class="property">contentType</span>.<span class="property">rawValue</span>)
        
        <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTask</span>(with: request) { (data, <span class="keyword">_</span>, error) <span class="keyword">in
            
            if let</span> error = error {
                <span class="call">print</span>(<span class="string">"Errer getting assigned jobs:</span> \(error)<span class="string">"</span>)
                <span class="call">completion</span>(.<span class="call">serverError</span>(error))
                <span class="keyword">return</span>
            }
            
            <span class="keyword">guard let</span> data = data <span class="keyword">else</span> {
                <span class="call">print</span>(<span class="string">"No data returned from data task"</span>)
                <span class="call">completion</span>(.<span class="dotAccess">noData</span>)
                <span class="keyword">return</span>
            }
            
            <span class="comment">// decode projects</span>
            <span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()
            decoder.<span class="property">dateDecodingStrategy</span> = .<span class="dotAccess">iso8601</span>
            <span class="keyword">do</span> {
                <span class="keyword">let</span> projectsRep = <span class="keyword">try</span> decoder.<span class="call">decode</span>([<span class="type">ProjectRepresentation</span>].<span class="keyword">self</span>, from: data)
                
                <span class="keyword">self</span>.<span class="call">updateProjects</span>(with: projectsRep)
                <span class="keyword">self</span>.<span class="property">projects</span> = projectsRep
                <span class="keyword">self</span>.<span class="property">projects</span>.<span class="call">sort</span> { $0.<span class="property">id</span> &lt; $1.<span class="property">id</span> }
                <span class="call">print</span>(<span class="string">"\n\nPROJECTS:</span> \(<span class="keyword">self</span>.<span class="property">projects</span>)<span class="string">\n\n"</span>)
            } <span class="keyword">catch</span> {
                <span class="call">print</span>(<span class="string">"Error decoding the jobs:</span> \(error)<span class="string">"</span>)
                <span class="call">completion</span>(.<span class="dotAccess">badDecode</span>)
            }
            
            <span class="call">completion</span>(<span class="keyword">nil</span>)
        }.<span class="call">resume</span>()
    }
}

</code></pre><p>Because <code>CodingKeys</code> are already defined in the representation model, <code>JSONDecoder</code> can easily decode the data into the representation model. Saving the representation model in the core data can also be done easily with convenience initializer, you just have to pass in the representation model and you have the core data model ready to be saved.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.gipyo-john-kim.com/projects/SchematicCapture</guid><title>Schematic Capture </title><description>iOS/web app for capturing and annotating photos of manufacturing machinery</description><link>https://www.gipyo-john-kim.com/projects/SchematicCapture</link><pubDate>Mon, 2 Mar 2020 10:10:00 -0800</pubDate><content:encoded><![CDATA[<h1>Schematic Capture <a href="https://github.com/Lambda-School-Labs/schematic-capture-ios" target="_blank"><i class="fab fa-github" style="font-size: 1em;"></i></a></h1><img src="https://www.gipyo-john-kim.com/images/Schematic%20Capture/Schematic%20Capture%20mockup.png" alt="Schematic Capture iPhone" class="responsive" width="720" /><video  width="420" controls>
    <source src="https://www.gipyo-john-kim.com/videos/Schematic%20Capture%20Demo.mp4" type="video/mp4">
    Schematic Capture Demo Video
</video><p>Schematic Capture is an iOS/web app for capturing and annotating photos of manufacturing machinery. The web app is responsible for assigning jobs and providing appropriate job-sheets to field technicians. The iOS app is responsible for the field technicians to download assigned job-sheets, take photos, and annotate them.</p><p>This project was built with 4 web developers, 1 UX designer, and 1 iOS developer.</p><ul><li><strong>Swift</strong></li><li><strong>REST API</strong></li><li><strong>UIKit</strong> - Built responsive UI with MVC design pattern</li><li><strong>Firebase Authentication -</strong> Provide secure user authentication with email or Google account</li><li><strong>Firebase Storage -</strong> Upload and store job sheets (CSV), schematics (PDF), and photos (PNG)</li><li><strong>CoreData</strong> - Persisted projects and jobs for offline capabilities</li><li><strong>PencilKit</strong> - Handled Annotation of captured photos</li><li><strong>PDFKit</strong> - Provided an easy mechanism to view schematics</li><li><strong>SCLAlertView</strong> - Provided simple alter views for success and warning messages</li><li><strong>ExpyTableView</strong> - Enabled expandable table view</li></ul>]]></content:encoded></item></channel></rss>